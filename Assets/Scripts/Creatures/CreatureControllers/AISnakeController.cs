// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;

public class AISnakeController : SnakeController
{
	public AISnakeController( Creature creature, MazeController mazeController ) : base( creature, mazeController )
	{
	}	
	
	/// <summary>
	/// Handles the arrival event - the creature arriving at the centre of a tile.  Returns the
	/// direction to travel in from this point on.
	/// </summary>
	public override SerpentConsts.Dir OnArrival()	
	{
		// Get our current direction first.  We want to turn in a random direction but not do a reverse turn.
		
		Snake snake = this.snake;
		SnakeHead head = snake.Head;
		SerpentConsts.Dir currentDirection = head.CurrentDirection;
		SerpentConsts.Dir oppositeDirection = SerpentConsts.OppositeDirection[ (int) currentDirection ];
		Vector3 position = head.CurrentDestination;
		MazeCell cell = this.mazeController.GetCellForPosition( position );
		
		BetterList<SerpentConsts.Dir> availableDirections = new BetterList<SerpentConsts.Dir>();
		
		for (int i = 0; i < SerpentConsts.NumDirections; ++i)
		{
			SerpentConsts.Dir dir = (SerpentConsts.Dir) i;
			if (dir == oppositeDirection)
			{
				continue;
			}
			else if (cell.MotionBlocked(dir))
			{
				continue;
			}
			availableDirections.Add(dir);
		}
		
		if (availableDirections.size == 0) 
		{
			return SerpentConsts.Dir.N; 
		}
		
		int randomIndex = UnityEngine.Random.Range(0, availableDirections.size);
		SerpentConsts.Dir randomDir = availableDirections[randomIndex];
		return randomDir;
	}
	
	
}


